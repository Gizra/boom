<?php
/**
 * @file
 * Code for the Shoov CI Build feature.
 */

include_once 'shoov_ci_build.features.inc';

/**
 * Available statuses for CI build.
 */
const SHOOV_CI_BUILD_CI_BUILD_STATUS_OK = 1;
const SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR = 2;
const SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR = 3;

/**
 * Implements hook_menu().
 */
function shoov_ci_build_menu() {
  $items['ci_build/%message/trigger/%ctools_js'] = array(
    'title' => 'Trigger the CI Build item',
    'page callback' => 'shoov_ci_build_trigger_ci_build_item',
    'page arguments' => array(1, 3),
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['ci_build/%node/%user/%/%ctools_js/%'] = array(
    'title' => 'Subscribe/Unsubscribe user to/from the CI Build',
    'page callback' => 'shoov_ci_build_subscribe_user',
    'page arguments' => array(1, 2, 3),
    'access callback' => 'shoov_ci_build_subscribe_user_access',
    'access arguments' => array(1, 2, 5),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Send message to the nodejs server.
 *
 * @param $message
 *  Message object.
 * @param $ajax
 *  Indicate if ajax should be used. Default to 'nojs'.
 */
function shoov_ci_build_trigger_ci_build_item($message, $ajax = 'nojs') {
  $nodejs_server_url = shoov_ci_build_get_nodejs_server_url($message);
  $account = user_load($message->uid);
  $url = array(
    $nodejs_server_url,
    'ci',
    $message->mid,
    shoov_restful_get_user_token($account),
  );
  $url = implode('/', $url);
  drupal_http_request($url);

  if (!$ajax) {
    drupal_set_message(t('Message @mid has been sent to the server', array('@mid' => $message->mid)));
    drupal_goto('<front>');
  }

  $commands = array();
  $commands[] = ajax_command_replace('#trigger-' . $message->mid, t('Triggered'));

  print ajax_render($commands);
}

/**
 * Check permissions to un/subscribe account to the CI Build.
 *
 * @param $ci_build
 *  The CI Build node object
 * @param $account
 *  The user object.
 * @param $token
 *  The access token
 *
 * @return bool
 *  Returns TRUE if user has permissions to un/subscribe account to the CI Build.
 */
function shoov_ci_build_subscribe_user_access($ci_build, $account, $token) {
  if (!$account->uid) {
    // The user acted upon is anonymous.
    return;
  }

  // Get the Repository ID.
  $wrapper = entity_metadata_wrapper('node', $ci_build);
  $gid = $wrapper->og_repo->getIdentifier();

  if (!og_is_member('node', $gid, 'user', $account)) {
    // Account is not a group member.
    return;
  }

  if (!user_access('administer flags')) {
    // User doesn't have permissions to un/subscribe account.
    return;
  }

  if (md5($ci_build->nid . '+' . $account->uid) != $token) {
    // Access token is invalid.
    return;
  }

  return TRUE;
}

/**
 * Un/subscribe user to the CI Build.
 *
 * @param $ci_build
 *  The CI Build node.
 * @param $account
 *  The user object.
 * @param $action
 *  Action to do. Can be 'subscribe' or 'unsubscribe'
 * @param $ajax
 *  Indicate if ajax should be used. Default to 'nojs'.
 */
function shoov_ci_build_subscribe_user($ci_build, $account, $action, $ajax = 'nojs') {
  // Get the flag.
  $flag = flag_get_flag('subscribe_ci_builds');
  $flag_action = $action == 'subscribe' ? 'flag' : 'unflag';
  // Un/flag user due to the sent action.
  $flag->flag($flag_action, $ci_build->nid, $account);

  if (!$ajax) {
    $params = array(
      '@uid' => $account->uid,
      '@build_id' => $ci_build->nid,
    );
    $action == 'subscribe' ?
      drupal_set_message(t('User @uid has been subscribed to the CI Build @build_id', $params)) :
      drupal_set_message(t('User @uid has been unsubscribed from the CI Build @build_id', $params));

    drupal_goto('<front>');
  }

  $commands = array();
  // Change the link to the opposite.
  if ($action == 'subscribe') {
    $commands[] = ajax_command_replace('#subscribe-' . $account->uid,
      l(t('Unsubscribe'), 'ci_build/' . $ci_build->nid . '/' . $account->uid . '/unsubscribe/nojs/' . md5($ci_build->nid . '+' . $account->uid),
        array('attributes' => array('class' => 'use-ajax', 'id' => 'unsubscribe-' . $account->uid))
      )
    );
  }
  else {
    $commands[] = ajax_command_replace('#unsubscribe-' . $account->uid,
      l(t('Subscribe'), 'ci_build/' . $ci_build->nid . '/' . $account->uid . '/subscribe/nojs/' . md5($ci_build->nid . '+' . $account->uid),
        array('attributes' => array('class' => 'use-ajax', 'id' => 'subscribe-' . $account->uid))
      )
    );
  }
  print ajax_render($commands);
}

/**
 * Return the CI builds that are waiting for processing.
 *
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 * @param int $range
 *   The number of maximum items to return. Defaults to 50.
 *
 * @return array
 *   Array of Message objects, or NULL if none found.
 */
function shoov_ci_build_get_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'queue')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

/**
 * Return the CI builds items that stuck in "in_progress" state.
 *
 * @param null $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 * @param int $range
 *   The number of maximum items to return. Defaults to 50.
 *
 * @return array
 *   Array of Message objects, or NULL if none found.
 */
function shoov_ci_build_get_stuck_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time() - variable_get('shoov_ci_stuck_ci_builds_timespan', 60 * 60);

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'in_progress')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

/**
 * Implements hook_node_presave().
 *
 * Add a random private key to the CI build.
 */
function shoov_ci_build_node_presave($node) {
  if ($node->type != 'ci_build') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);

  if (empty($node->nid)) {
    // Check config file exists for the new CI Build.
    if (!shoov_repository_config_file_exists($wrapper->og_repo->value(), $wrapper->field_git_branch->value())) {
      throw new Exception(".shoov.yml if missing in the root of the repository.");
    }
  }
  else {
    $original_wrapper = entity_metadata_wrapper('node', $node->original);
    $original_enabled = $original_wrapper->field_ci_build_enabled->value();
    if ($wrapper->field_ci_build_enabled->value() && !$original_enabled) {
      // Trying to enable the CI Build.
      if (!shoov_repository_config_file_exists($wrapper->og_repo->value(), $wrapper->field_git_branch->value())) {
        throw new Exception('.shoov.yml if missing in the root of the repository.');
      }
    }
  }


  if (!($wrapper->field_status_token->value())) {
    $wrapper->field_status_token->set(drupal_random_key());
  }

  if ($wrapper->field_private_key->value()) {
    // Private key is already populated.
    return;
  }

  $wrapper->field_private_key->set(drupal_random_key());
}

/**
 * Implements hook_node_insert().
 *
 * Create a CI build item when a new CI build node is created.
 */
function shoov_ci_build_node_insert($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Implements hook_node_update().
 *
 * Create a CI build item when an existing CI build is enabled.
 */
function shoov_ci_build_node_update($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Create a CI build item.
 *
 * @param $node
 *   The CI-build node object.
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 *
 * @return Message | NULL
 *   The message object if all conditions were met.
 */
function shoov_ci_build_create_build_item($node, $timestamp = NULL) {
  if ($node->type != 'ci_build') {
    return;
  }

  if (!empty($node->_skip_create_ci_build_item)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_ci_build_enabled->value()) {
    // CI build is not enabled.

    // Find queue items and delete them.
    if ($ids = shoov_ci_build_get_items_by_status($node, 'queue')) {
      message_delete_multiple($ids);
    }

    return;
  }

  // Verify a "queue" or "in progress" build items doesn't already exist.
  $status = array(
    'queue',
    'in_progress',
  );

  if (shoov_ci_build_get_items_count($node, $status)) {
    return;
  }

  $timestamp = $timestamp ?: time();

  $arguments = array(
    '@{message:field-ci-build:og-repo}' => $wrapper->og_repo->label(),
    '@{message:field-ci-build:field_git_branch}' => $wrapper->field_git_branch->value(),
  );

  $message = message_create('ci_build', array('uid' => $node->uid, 'arguments' => $arguments));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_ci_build->set($node);
  $wrapper->field_ci_build_status->set('queue');
  // Set to be invoked immediately.
  $wrapper->field_ci_build_timestamp->set($timestamp);

  $wrapper->save();

  // Subscribe the author to the node.
  $account = user_load($node->uid);
  flag('flag', 'subscribe_ci_builds', $node->nid, $account);

  // Trigger Pusher event when new CI Build is created.
  shoov_ci_build_trigger_event(message_load($message->mid), 'ci_build_new');

  return $message;
}

/**
 * Implements hook_message_presave().
 */
function shoov_ci_build_message_presave(Message $message) {
  _shoov_ci_build_check_requeue($message);
}

/**
 * Implements hook_message_update().
 *
 * @param \Message $message
 *   The message object.
 */
function shoov_ci_build_message_update(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  // Trigger Pusher event when CI Build status changes.
  shoov_ci_build_trigger_event($message, 'ci_build_update');

  $status = $wrapper->field_ci_build_status->value();
  if (!in_array($status, array('error', 'done'))) {
    // Item still in progress or re-queued after being stuck.
    return;
  }

  if (!$wrapper->field_ci_build->field_ci_build_enabled->value()) {
    // CI build is disabled.
    return;
  }

  $node = $wrapper->field_ci_build->value();
  $timestamp = shoov_ci_build_get_timestamp_for_next_ci_build_item($message);

  shoov_ci_build_create_build_item($node, $timestamp);
  shoov_ci_build_process_ci_build_item($message);
}

/**
 * Return the timestamp for the next CI build item execution.
 *
 * @param Message $message
 *  The CI build item object.
 *
 * @return int|NULL
 *  The time of start next CI build item.
 *
 */
function shoov_ci_build_get_timestamp_for_next_ci_build_item(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $node = $wrapper->field_ci_build->value();

  $status = $wrapper->field_ci_build_status->value();
  $ci_build_status = shoov_ci_build_get_ci_build_status($node);

  if ($status == 'error' && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Handle the first error for CI build.
    return NULL;
  }

  if ($ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR) {
    // Error occurred, but not determined yet is a confirmed incident.
    return NULL;
  }

  // Determine the time for next execution. Intervals are in seconds.
  $interval = shoov_ci_build_get_ci_build_interval($node);
  if ($interval == 'manual') {
    // TODO: NULL means run immediately. Need rewrite to stop executions.
    return NULL;
  }

  return strtotime('+' . $interval . ' seconds');
}

/**
 * Return the status of CI build.
 *
 * @param $node
 *  The CI build object.
 *
 * @return string|NULL
 *  The name of status.
 */
function shoov_ci_build_get_ci_build_status($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if (!$ci_build_status = $wrapper->field_ci_build_incident_status->value()) {
    return SHOOV_CI_BUILD_CI_BUILD_STATUS_OK;
  }

  $failed_count = $wrapper->field_ci_build_failed_count->value();
  if ($failed_count >= variable_get('shoov_ci_build_failed_count_threshold', 2)) {
    return SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR;
  }

  return SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR;
}

/**
 * Return the interval for CI build.
 *
 * @param $node
 *  The CI build object.
 *
 * @return int|string
 *  The count of seconds or the string 'manual'.
 */
function shoov_ci_build_get_ci_build_interval($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  return $wrapper->field_ci_build_interval->value();
}

/**
 * Set the CI build incident status and create incident if necessary.
 *
 * @param \Message $message
 *   The CI build item object.
 */
function shoov_ci_build_process_ci_build_item(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  $ci_build_node = $wrapper->field_ci_build->value();

  $status = $wrapper->field_ci_build_status->value();

  if (!in_array($status, array('done', 'error'))) {
    return;
  }

  $ci_build_status = shoov_ci_build_get_ci_build_status($ci_build_node);
  $ci_incident = shoov_ci_incident_get_latest_error_incident($ci_build_node);

  // Indicate if the Ci build node needs to be saved, due to a change in the
  // status or error count.
  $save = FALSE;
  if ($status == 'error' && $ci_build_status != SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR) {
    // Increase amount of unconfirmed errors.
    $failed_count = $wrapper->field_ci_build->field_ci_build_failed_count->value();
    ++$failed_count;
    $wrapper->field_ci_build->field_ci_build_failed_count->set($failed_count);
    // Determine a new status for CI build.
    $new_status = $failed_count >= variable_get('shoov_ci_build_failed_count_threshold', 2) ? 'error' : 'unconfirmed_error';
    $wrapper->field_ci_build->field_ci_build_incident_status->set($new_status);
    $save = TRUE;
  }
  elseif ($status == 'done' && $ci_build_status != SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Reset the CI build incident status and error count number.
    $wrapper->field_ci_build->field_ci_build_incident_status->set(NULL);
    $wrapper->field_ci_build->field_ci_build_failed_count->set(0);
    $save = TRUE;
  }

  if ($save) {
    // Skip the creation of a CI build item.
    $ci_build_node->_skip_create_ci_build_item = TRUE;
    $wrapper->field_ci_build->save();

    // Get the updated status.
    $ci_build_status = shoov_ci_build_get_ci_build_status($ci_build_node);
  }

  $arguments = array(
    '@repo' => $wrapper->field_ci_build->og_repo->label(),
    '@branch' => $wrapper->field_ci_build->field_git_branch->value(),
  );

  // @todo: Move to a general module?
  $client_url = variable_get('shoov_client_url', 'http://localhost:9000');


  if (!$ci_incident && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR) {
    // Create a new incident.
    $message_type = 'ci_incident_error';
    $ci_incident = shoov_ci_incident_create_error_incident($message);
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  elseif ($ci_incident && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Mark the existing incident as fixed.
    $incident_wrapper = entity_metadata_wrapper('node', $ci_incident);
    $incident_wrapper->field_fixed_build->set($message);
    $incident_wrapper->field_ci_build_error->set(NULL);
    $incident_wrapper->save();

    $message_type = 'ci_incident_fixed';
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  else {
    return;
  }

  // Send a message to all following members.
  $incident_message = message_create($message_type, array('arguments' => $arguments));
  $incident_message->uid = $message->uid;
  $message_wrapper = entity_metadata_wrapper('message', $incident_message);
  $message_wrapper->field_ci_incident->set($ci_incident);

  $subscribe_options = array(
    'notify message owner' => TRUE,
  );
  message_subscribe_send_message('node', $ci_build_node, $incident_message, array(), $subscribe_options);
}

/**
 * Return the URL of the nodejs server.
 *
 * If the CI build is in an "unconfirmed error" status, we pipe the request to
 * the secondary nodejs server, in order to try and avoid a false positive in
 * the result.
 *
 * @param \Message $message
 *   The CI build item message.
 *
 * @return string
 *   The URL of the nodejs server.
 *
 * @throws \Exception
 */
function shoov_ci_build_get_nodejs_server_url(Message $message) {
  if (!$primary_server = variable_get('shoov_nodejs_server', 'http://localhost:3000')) {
    throw new \Exception('Primary nodejs server is not defined.');
  }

  if (!$secondary_server = variable_get('shoov_nodejs_server_secondary', 'http://localhost:3001')) {
    throw new \Exception('Secondary nodejs server is not defined.');
  }

  // Get the status of the CI build.
  $wrapper = entity_metadata_wrapper('message', $message);

  $node = $wrapper->field_ci_build->value();
  return shoov_ci_build_get_ci_build_status($node) == SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR ? $secondary_server : $primary_server;
}

/**
 * Trigger Pusher event when new CI build is created or updated.
 *
 * @param Message $message
 *  Message object.
 * @param string $event
 *   Event name.
 */
function shoov_ci_build_trigger_event(Message $message, $event) {
  $wrapper = entity_metadata_wrapper('message', $message);

  $account = user_load($message->uid);
  $handler = restful_get_restful_handler('ci-build-items');
  $handler->setAccount($account);
  $result = $handler->get($message->mid);
  $data = array($result[0]);
  shoov_pusher_trigger_event($wrapper->field_ci_build->og_repo->getIdentifier(), $event, $data);
}

/**
 * Implements hook_query_TAG_alter().
 *
 * CI Build Status token should be empty.
 */
function shoov_ci_build_query_empty_status_token_alter(QueryAlterableInterface $query) {
  $query->leftJoin('field_data_field_status_token', 's', 'node.nid = s.entity_id');
  $query->isNull('s.field_status_token_value');
}

/**
 * Get all messages with certain status of certain CI Build.
 *
 * @param $node
 *  The CI Build node.
 * @param $status
 *  Status field value. Defaults to "queue".
 *
 * @return array
 *  Return array of messages IDs.
 */
function shoov_ci_build_get_items_by_status($node, $status ='queue') {
  $account = user_load($node->uid);
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build', 'target_id', $node->nid)
    ->fieldCondition('field_ci_build_status', 'value', $status)
    // Add user's account to the metadata of the query in order not to get
    // items user doesn't have access to.
    ->addMetaData('account', $account)
    ->execute();

  return empty($result['message']) ? array() : array_keys($result['message']);
}

/**
 * Get count of messages with certain statuses of certain CI Build.
 *
 * @param $node
 *  The CI Build node
 * @param array $status
 *  An array of statuses.
 *
 * @return int
 *  Return count of found items.
 */
function shoov_ci_build_get_items_count($node, $status = array()) {
  $account = user_load($node->uid);
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build', 'target_id', $node->nid);
  if ($status) {
    $query->fieldCondition('field_ci_build_status', 'value', $status, 'IN');
  }
  $count = $query
    // Add user's account to the metadata of the query in order not to get
    // items user doesn't have access to.
    ->addMetaData('account', $account)
    ->count()
    ->execute();

  return $count;
}

/**
 * Helper function; Check whether a ci_build message was re-queued.
 *
 * @param Message $message
 *   Message from hook_message_presave().
 */
function _shoov_ci_build_check_requeue(Message $message) {
  if (empty($message->original) || $message->type !='ci_build') {
    // Not updating a ci_build message.
    return;
  }

  $wrapper = entity_metadata_wrapper('message', $message);
  $original_wrapper = entity_metadata_wrapper('message', $message->original);
  if ($original_wrapper->field_ci_build_status->value() == "in_progress" && $wrapper->field_ci_build_status->value() == "queue") {
    // The build status changed from "in_progress" to "queue".
    // Increment requeue count.
    $requeue_count = $wrapper->field_requeue_count->value() + 1;
    $wrapper->field_requeue_count->set($requeue_count);

    if ($requeue_count == 3) {
      // Send notification to site admin.

      $message_parameters = array('@ci_name' => $wrapper->field_ci_build->label());

      $arguments = array(
        '@repo' => empty($wrapper->field_ci_build->og_repo) ? "" : $wrapper->field_ci_build->og_repo->label(),
        '@branch' => empty($wrapper->field_ci_build->field_git_branch) ? "" : $wrapper->field_ci_build->field_git_branch->label(),
        '@notification' => t('@ci_name has been re-queued 3 times.', $message_parameters),
        '@url' => url('node/' . $wrapper->field_ci_build->getIdentifier(), array('absolute' => TRUE)),
      );

      // Create notification message.
      $notification_message = message_create("ci_incident_notification", array('arguments' => $arguments));
      $notification_message->uid = 1;

      $options = array(
        'mail' => variable_get('site_mail', ini_get('sendmail_from')),
      );
      message_notify_send_message($notification_message, $options);
    }
  }

}
