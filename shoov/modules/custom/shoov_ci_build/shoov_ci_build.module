<?php
/**
 * @file
 * Code for the Shoov CI Build feature.
 */

include_once 'shoov_ci_build.features.inc';

/**
 * Available statuses for CI build.
 */
const SHOOV_CI_BUILD_CI_BUILD_STATUS_OK = 1;
const SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR = 2;
const SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR = 3;

/**
 * Return the CI builds that are waiting for processing.
 *
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 * @param int $range
 *   The number of maximum items to return. Defaults to 50.
 *
 * @return array
 *   Array of Message objects, or NULL if none found.
 */
function shoov_ci_build_get_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'queue')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

/**
 * Return the CI builds items that stuck in "in_progress" state.
 *
 * @param null $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 * @param int $range
 *   The number of maximum items to return. Defaults to 50.
 *
 * @return array
 *   Array of Message objects, or NULL if none found.
 */
function shoov_ci_build_get_stuck_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time() - variable_get('shoov_ci_stuck_ci_builds_timespan', 60 * 60);

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'in_progress')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

/**
 * Implements hook_node_presave().
 *
 * Add a random private key to the CI build.
 */
function shoov_ci_build_node_presave($node) {
  if ($node->type != 'ci_build') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_private_key->value()) {
    // Private key is already populated.
    return;
  }

  $wrapper->field_private_key->set(drupal_random_key());
}

/**
 * Implements hook_node_insert().
 *
 * Create a CI build item when a new CI build node is created.
 */
function shoov_ci_build_node_insert($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Implements hook_node_update().
 *
 * Create a CI build item when an existing CI build is enabled.
 */
function shoov_ci_build_node_update($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Create a CI build item.
 *
 * @param $node
 *   The CI-build node object.
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 *
 * @return Message | NULL
 *   The message object if all conditions were met.
 */
function shoov_ci_build_create_build_item($node, $timestamp = NULL) {
  if ($node->type != 'ci_build') {
    return;
  }

  if (!empty($node->_skip_create_ci_build_item)) {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_ci_build_enabled->value()) {
    // CI build is not enabled.
    return;
  }

  // Verify a "queue" or "in progress" build items doesn't already exist.
  $status = array(
    'queue',
    'in_progress',
  );

  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build', 'target_id', $node->nid)
    ->fieldCondition('field_ci_build_status', 'value', $status, 'IN')
    ->count()
    ->execute();

  if ($count) {
    return;
  }

  $timestamp = $timestamp ?: time();

  $arguments = array(
    '@{message:field-ci-build:og-repo}' => $wrapper->og_repo->label(),
    '@{message:field-ci-build:field_git_branch}' => $wrapper->field_git_branch->value(),
  );

  $message = message_create('ci_build', array('uid' => $node->uid, 'arguments' => $arguments));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_ci_build->set($node);
  $wrapper->field_ci_build_status->set('queue');
  // Set to be invoked immediately.
  $wrapper->field_ci_build_timestamp->set($timestamp);

  $wrapper->save();

  // Subscribe the author to the node.
  $account = user_load($node->uid);
  flag('flag', 'subscribe_ci_builds', $node->nid, $account);

  return $message;
}

/**
 * Implements hook_message_update().
 *
 * @param \Message $message
 *   The message object.
 */
function shoov_ci_build_message_update(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $status = $wrapper->field_ci_build_status->value();
  if (!in_array($status, array('error', 'done'))) {
    // Item still in progress or re-queued after being stuck.
    return;
  }

  if (!$wrapper->field_ci_build->field_ci_build_enabled->value()) {
    // CI build is disabled.
    return;
  }

  $node = $wrapper->field_ci_build->value();
  $timestamp = shoov_ci_build_get_timestamp_for_next_ci_build_item($message);

  shoov_ci_build_create_build_item($node, $timestamp);
  shoov_ci_build_process_ci_build_item($message);
}

/**
 * Return the timestamp for the next CI build item execution.
 *
 * @param Message $message
 *  The CI build item object.
 *
 * @return int|NULL
 *  The time of start next CI build item.
 *
 */
function shoov_ci_build_get_timestamp_for_next_ci_build_item(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $node = $wrapper->field_ci_build->value();

  $status = $wrapper->field_ci_build_status->value();
  $ci_build_status = shoov_ci_build_get_ci_build_status($node);

  if ($status == 'error' && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Handle the first error for CI build.
    return NULL;
  }

  if ($ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR) {
    // Error occurred, but not determined yet is a confirmed incident.
    return NULL;
  }

  // @todo: Make configurable.
  return strtotime('+3 minutes');
}

/**
 * Return the status of CI build.
 *
 * @param $node
 *  The CI build object.
 *
 * @return string|NULL
 *  The name of status.
 */
function shoov_ci_build_get_ci_build_status($node) {
  $wrapper = entity_metadata_wrapper('node', $node);

  if (!$ci_build_status = $wrapper->field_ci_build_incident_status->value()) {
    return SHOOV_CI_BUILD_CI_BUILD_STATUS_OK;
  }

  $failed_count = $wrapper->field_ci_build_failed_count->value();
  if ($failed_count >= variable_get('shoov_ci_build_failed_count_threshold', 2)) {
    return SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR;
  }

  return SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR;
}

/**
 * Set the CI build incident status and create incident if necessary.
 *
 * @param \Message $message
 *   The CI build item object.
 */
function shoov_ci_build_process_ci_build_item(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  $ci_build_node = $wrapper->field_ci_build->value();

  $status = $wrapper->field_ci_build_status->value();

  if (!in_array($status, array('done', 'error'))) {
    return;
  }

  $ci_build_status = shoov_ci_build_get_ci_build_status($ci_build_node);
  $ci_incident = shoov_ci_incident_get_latest_error_incident($ci_build_node);

  // Indicate if the Ci build node needs to be saved, due to a change in the
  // status or error count.
  $save = FALSE;
  if ($status == 'error' && $ci_build_status != SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR) {
    // Increase amount of unconfirmed errors.
    $failed_count = $wrapper->field_ci_build->field_ci_build_failed_count->value();
    ++$failed_count;
    $wrapper->field_ci_build->field_ci_build_failed_count->set($failed_count);
    // Determine a new status for CI build.
    $new_status = $failed_count >= variable_get('shoov_ci_build_failed_count_threshold', 2) ? 'error' : 'unconfirmed_error';
    $wrapper->field_ci_build->field_ci_build_incident_status->set($new_status);
    $save = TRUE;
  }
  elseif ($status == 'done' && $ci_build_status != SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Reset the CI build incident status and error count number.
    $wrapper->field_ci_build->field_ci_build_incident_status->set(NULL);
    $wrapper->field_ci_build->field_ci_build_failed_count->set(0);
    $save = TRUE;
  }

  if ($save) {
    // Skip the creation of a CI build item.
    $ci_build_node->_skip_create_ci_build_item = TRUE;
    $wrapper->field_ci_build->save();

    // Get the updated status.
    $ci_build_status = shoov_ci_build_get_ci_build_status($ci_build_node);
  }

  $arguments = array(
    '@repo' => $wrapper->field_ci_build->og_repo->label(),
    '@branch' => $wrapper->field_ci_build->field_git_branch->value(),
  );

  // @todo: Move to a general module?
  $client_url = variable_get('shoov_client_url', 'http://localhost:9000');


  if (!$ci_incident && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_ERROR) {
    // Create a new incident.
    $message_type = 'ci_incident_error';
    $ci_incident = shoov_ci_incident_create_error_incident($message);
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  elseif ($ci_incident && $ci_build_status == SHOOV_CI_BUILD_CI_BUILD_STATUS_OK) {
    // Mark the existing incident as fixed.
    $incident_wrapper = entity_metadata_wrapper('node', $ci_incident);
    $incident_wrapper->field_fixed_build->set($message);
    $incident_wrapper->field_ci_build_error->set(NULL);
    $incident_wrapper->save();

    $message_type = 'ci_incident_fixed';
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  else {
    return;
  }

  // Send a message to all following members.
  $incident_message = message_create($message_type, array('arguments' => $arguments));
  $incident_message->uid = $message->uid;
  $message_wrapper = entity_metadata_wrapper('message', $incident_message);
  $message_wrapper->field_ci_incident->set($ci_incident);

  $subscribe_options = array(
    'notify message owner' => TRUE,
  );
  message_subscribe_send_message('node', $ci_build_node, $incident_message, array(), $subscribe_options);
}

/**
 * Return the URL of the nodejs server.
 *
 * If the CI build is in an "unconfirmed error" status, we pipe the request to
 * the secondary nodejs server, in order to try and avoid a false positive in
 * the result.
 *
 * @param \Message $message
 *   The CI build item message.
 *
 * @return string
 *   The URL of the nodejs server.
 *
 * @throws \Exception
 */
function shoov_ci_build_get_nodejs_server_url(Message $message) {
  if ($primary_server = variable_get('shoov_nodejs_server', 'http://localhost:3000')) {
    throw new \Exception('Primary nodejs server is not defined.');
  }

  if ($secondary_server = variable_get('shoov_nodejs_server', 'http://localhost:3001')) {
    throw new \Exception('Secondary nodejs server is not defined.');
  }

  // Get the status of the CI build.
  $wrapper = entity_metadata_wrapper('message', $message);

  $node = $wrapper->field_ci_build->value();
  return shoov_ci_build_get_ci_build_status($node) == SHOOV_CI_BUILD_CI_BUILD_STATUS_UNCONFIRMED_ERROR ? $secondary_server : $primary_server;
}
