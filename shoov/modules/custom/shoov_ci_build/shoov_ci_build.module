<?php
/**
 * @file
 * Code for the Shoov CI Build feature.
 */

include_once 'shoov_ci_build.features.inc';

/**
 * Return the CI builds that are waiting for processing.
 *
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 * @param int $range
 *   The number of maximum items to return. Defaults to 50.
 *
 * @return array
 *   Array of Message objects, or NULL if none found.
 */
function shoov_ci_build_get_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time();

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'queue')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

function shoov_ci_build_get_stuck_ci_builds($timestamp = NULL, $range = 50) {
  $timestamp = $timestamp ?: time() - variable_get('shoov_ci_stuck_ci_builds_timespan', 60 * 60);

  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build_timestamp', 'value', $timestamp, '<=')
    ->fieldCondition('field_ci_build_status', 'value', 'in_progress')
    ->range(0, $range)
    ->propertyOrderBy('mid')
    ->execute();

  if (empty($result['message'])) {
    return;
  }

  return message_load_multiple(array_keys($result['message']));
}

/**
 * Implements hook_node_insert().
 *
 * Create a CI build item when a new CI build node is created.
 */
function shoov_ci_build_node_insert($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Implements hook_node_update().
 *
 * Create a CI build item when an existing CI build is enabled.
 */
function shoov_ci_build_node_update($node) {
  shoov_ci_build_create_build_item($node);
}

/**
 * Create a CI build item.
 *
 * @param $node
 *   The CI-build node object.
 * @param int $timestamp
 *   The timestamp of "now". If empty, the existing current time will be used.
 *
 * @return Message | NULL
 *   The message object if all conditions were met.
 */
function shoov_ci_build_create_build_item($node, $timestamp = NULL) {
  if ($node->type != 'ci_build') {
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if (!$wrapper->field_ci_build_enabled->value()) {
    // CI build is not enabled.
    return;
  }

  // Verify a "queue" or "in progress" build items doesn't already exist.
  $status = array(
    'queue',
    'in_progress',
  );

  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'message')
    ->entityCondition('bundle', 'ci_build')
    ->fieldCondition('field_ci_build', 'target_id', $node->nid)
    ->fieldCondition('field_ci_build_status', 'value', $status, 'IN')
    ->count()
    ->execute();

  if ($count) {
    return;
  }

  $timestamp = $timestamp ?: time();

  $message = message_create('ci_build', array('uid' => $node->uid));
  $wrapper = entity_metadata_wrapper('message', $message);
  $wrapper->field_ci_build->set($node);
  $wrapper->field_ci_build_status->set('queue');
  // Set to be invoked immediately.
  $wrapper->field_ci_build_timestamp->set($timestamp);

  $wrapper->save();

  // Subscribe the author to the node.
  $account = user_load($node->uid);
  flag('flag', 'subscribe_ci_builds', $node->nid, $account);

  return $message;
}

/**
 * Implements hook_message_update().
 *
 * @param \Message $message
 *   The message object.
 */
function shoov_ci_build_message_update(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);
  $status = $wrapper->field_ci_build_status->value();
  if (!in_array($status, array('error', 'done'))) {
    // Item still in progress or re-queued after being stuck.
    return;
  }

  if (!$wrapper->field_ci_build->field_ci_build_enabled->value()) {
    // CI build is disabled.
    return;
  }

  $node = $wrapper->field_ci_build->value();

  // @todo: Make configurable.
  $timestamp = strtotime('+3 minutes');

  shoov_ci_build_create_build_item($node, $timestamp);
  shoov_ci_build_set_build_status($message);
}

/**
 * Set the status of the CI build on failure, and clear when it's fixed.
 *
 * @param \Message $message
 *   The "ci_build" message object.
 */
function shoov_ci_build_set_build_status(Message $message) {
  $wrapper = entity_metadata_wrapper('message', $message);

  $status = $wrapper->field_ci_build_status->value();

  if (!in_array($status, array('done', 'error'))) {
    return;
  }

  $build_node = $wrapper->field_ci_build->value();
  $ci_incident = shoov_ci_incident_get_latest_error_incident($build_node);


  $arguments = array(
    '@repo' => $wrapper->field_ci_build->og_repo->label(),
    '@branch' => $wrapper->field_ci_build->field_git_branch->value(),
  );

  // @todo: Move to a general module?
  $client_url = variable_get('shoov_client_url', 'http://localhost:9000');

  if (!$ci_incident && $status == 'error') {
    // Create a new incident.
    $message_type = 'ci_incident_error';
    $ci_incident = shoov_ci_incident_create_error_incident($message);
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  elseif ($ci_incident && $status == 'done') {
    // Mark the existing incident as fixed.
    $incident_wrapper = entity_metadata_wrapper('node', $ci_incident);
    $incident_wrapper->field_fixed_build->set($message);
    $incident_wrapper->field_ci_build_error->set(NULL);
    $incident_wrapper->save();

    $message_type = 'ci_incident_fixed';
    $options = array('fragment' => '/ci-incidents/' . $ci_incident->nid);
    $arguments += array(
      '@url' => url($client_url, $options),
    );
  }
  else {
    return;
  }

  // Send a message to all following members.
  $incident_message = message_create($message_type, array('arguments' => $arguments));
  $incident_message->uid = $message->uid;
  $message_wrapper = entity_metadata_wrapper('message', $incident_message);
  $message_wrapper->field_ci_incident->set($ci_incident);

  $subscribe_options = array(
    'notify message owner' => TRUE,
  );
  message_subscribe_send_message('node', $build_node, $incident_message, array(), $subscribe_options);
}