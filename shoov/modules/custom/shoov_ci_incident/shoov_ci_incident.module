<?php
/**
 * @file
 * Code for the Shoov CI Incident feature.
 */

include_once 'shoov_ci_incident.features.inc';


/**
 * Return an incident of a CI build.
 *
 * @param stdClass $node
 *   The CI build node object.
 * @param bool $only_error
 *   Determines if the last incident should be limited to status "error".
 *   Defaults to TRUE.
 *
 * @return stdClass | NULL
 *   The CI incident node object if found, or NULL.
 */
function shoov_ci_incident_get_latest_error_incident($node, $only_error = TRUE) {
  // Use the node author's account for the query, so in case it is ran as
  // anonymous user, it still can access the nodes.
  $account = user_load($node->uid);

  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'ci_incident')
    ->fieldCondition('field_ci_build', 'target_id', $node->nid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->addMetaData('account', $account)
    ->range(0, 1);

  if ($only_error) {
    $query->fieldCondition('field_ci_build_error', 'value', TRUE);
  }

  $result = $query->execute();

  if (empty($result['node'])) {
    return;
  }

  $id = key($result['node']);
  return node_load($id);
}

/**
 * Create an error incident node.
 *
 * @param \Message $message
 *   The "ci_build" message object.
 *
 * @return stdClass
 *   The newly saved CI incident node object.
 */
function shoov_ci_incident_create_error_incident(Message $message) {
  $message_wrapper = entity_metadata_wrapper('message', $message);
  $ci_build_id = $message_wrapper->field_ci_build->getIdentifier();

  $params = array(
    '@count' => shoov_ci_incident_get_incidents_count($ci_build_id) + 1,
  );

  $values = array(
    'type' => 'ci_incident',
    'title' => format_string('Incident @count', $params),
    'uid' => $message->uid,
  );


  $node = entity_create('node', $values);
  $wrapper = entity_metadata_wrapper('node', $node);

  $wrapper->og_repo->set($message_wrapper->field_ci_build->og_repo->getIdentifier());
  $wrapper->field_ci_build->set($ci_build_id);
  $wrapper->field_failing_build->set($message);
  $wrapper->field_ci_build_error->set(TRUE);
  $wrapper->save();

  $account = user_load($node->uid);
  $handler = restful_get_restful_handler('ci-incidents');
  $handler->setAccount($account);
  $result = $handler->get($node->nid);
  $data = array($result[0]);

  $repo_id = $wrapper->og_repo->value(array('identifier' => TRUE));
  shoov_pusher_trigger_event($repo_id, 'new_incident', $data);

  return $node;
}

/**
 * Get the number of existing incidents per CI build.
 *
 * @param int $nid
 *   The CI-build node ID.
 *
 * @return int
 *   The count of CI incidents.
 */
function shoov_ci_incident_get_incidents_count($nid) {
  $query = new EntityFieldQuery();
  $count = $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'ci_incident')
    ->fieldCondition('field_ci_build', 'target_id', $nid)
    ->propertyCondition('status', NODE_PUBLISHED)
    ->count()
    ->execute();

  return $count;
}
