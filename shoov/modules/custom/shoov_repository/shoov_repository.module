<?php
/**
 * @file
 * Code for the Shoov Repository feature.
 */

include_once 'shoov_repository.features.inc';

/**
 * Implements hook_node_presave().
 *
 * Get the GitHub repo ID for a local repository.
 */
function shoov_repository_node_presave($node) {
  if ($node->type != 'repository') {
    // Not a repository node.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_github_id->value()) {
    // GitHub Id already populated.
    return;
  }

  // Check that the vocabulary "screenshots_tags" exist for this repository.
  $vocabularies = og_vocab_relation_get_by_group('node', $node->id);
  $vocabulary_exist = false;
  foreach ($vocabularies as $vocabulary) {
    if (taxonomy_vocabulary_load($vocabulary->vid)->name == 'screenshots_tags') {
      $vocabulary_exist = true;
      break;
    }
  }

  if (!$vocabulary_exist) {
    // Creating the new vocabulary.
    $vocabulary = new stdClass();
    $vocabulary->name = "screenshots_tags";
    $vocabulary->machine_name = "screenshots_tags_" . $node->id;
    taxonomy_vocabulary_save($vocabulary);
    og_vocab_relation_save($vocabulary->vid, 'node', $node->id);
  }

  list($owner, $repo) = explode('/', $node->title);

  $user_wrapper = entity_metadata_wrapper('user', $node->uid);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  $data = shoov_github_http_request("repos/$owner/$repo", $options);

  // @todo: Throw exception on error?
  if (!empty($data['id'])) {
    $wrapper->field_github_id->set($data['id']);
  }
}
