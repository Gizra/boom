<?php
/**
 * @file
 * Code for the Shoov Repository feature.
 */

include_once 'shoov_repository.features.inc';

/**
 * Implements hook_node_presave().
 *
 * Get the GitHub repo ID for a local repository.
 */
function shoov_repository_node_presave($node) {
  if ($node->type != 'repository') {
    // Not a repository node.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_github_id->value()) {
    // GitHub Id already populated.
    return;
  }

  list($owner, $repo) = explode('/', $node->title);

  $user_wrapper = entity_metadata_wrapper('user', $node->uid);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  $data = shoov_github_http_request("repos/$owner/$repo", $options);

  // @todo: Throw exception on error?
  // or try again or set state invalid to this repo.
  if (!empty($data['id'])) {
    $wrapper->field_github_id->set($data['id']);
  }
}

/**
 * Implements hook_node_insert().
 *
 * Check that vocabulary with name "screenshots_tags" exist for this repository
 * otherwise create one and assign with repository.
 *
 * @param $node
 *    Repository object.
 */
function shoov_repository_node_insert($node) {
  if ($node->type != 'repository') {
    // Not a repository node.
    return;
  }

  if (shoov_repository_vocabulary_exist('screenshots_tags', $node)) {
    // Vocabulary for screenshots tags already exist.
    return;
  }

  shoov_repository_create_screenshot_tags_vocabulary($node);
}

/**
 * Determine the vocabulary exist in repository.
 *
 * @param $vocabulary
 *    The name of a vocabulary.
 * @param $node
 *    The repository object or the id of repository.
 *
 * @return int|false
 *    The vid of vocabulary or false if vocabulary doesn't exist.
 */
function shoov_repository_vocabulary_exist($vocabulary, $repository) {
  if ($repository_id = is_int($repository)) {
    $repository = node_load($repository_id);
    if (!$repository) {
      throw Exception("The repository ID {$repository_id} doesn't exists");
    }
  }

  // Check that the vocabulary exist for this repository.
  $vocabularies = og_vocab_relation_get_by_group('node', $repository->nid);
  foreach ($vocabularies as $voc) {
    if (taxonomy_vocabulary_load($voc->vid)->name == $vocabulary) {
      return $voc->vid;
    }
  }

  return false;
}

/**
 * Create vocabulary for screenshot tags in repository.
 *
 * @param $node
 *    The repository id.
 *
 * @return int
 *    The id of newly created vocabulary.
 */
function shoov_repository_create_screenshot_tags_vocabulary($node) {
  // Creating the new vocabulary.
  $vocabulary = new stdClass();
  $vocabulary->name = "screenshots_tags";
  $vocabulary->machine_name = "screenshots_tags_" . $node->nid;
  $vocabulary->description = "The vocabulary contains tags for screenshots.";
  taxonomy_vocabulary_save($vocabulary);
  og_vocab_relation_save($vocabulary->vid, 'node', $node->nid);

  return $vocabulary->vid;
}
