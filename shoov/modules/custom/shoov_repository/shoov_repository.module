<?php
/**
 * @file
 * Code for the Shoov Repository feature.
 */

include_once 'shoov_repository.features.inc';

/**
 * Implements hook_node_presave().
 *
 * Get the GitHub repo ID for a local repository.
 */
function shoov_repository_node_presave($node) {
  if ($node->type != 'repository') {
    // Not a repository node.
    return;
  }

  $wrapper = entity_metadata_wrapper('node', $node);
  if ($wrapper->field_github_id->value()) {
    shoov_repository_check_repository_unique($wrapper->field_github_id->value(), $node);
    // GitHub Id already populated.
    return;
  }

  list($owner, $repo) = explode('/', $node->title);

  $user_wrapper = entity_metadata_wrapper('user', $node->uid);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  $data = shoov_github_http_request("repos/$owner/$repo", $options);
  $data = $data['data'];

  // @todo: Throw exception on error?
  // or try again or set state invalid to this repo.
  if (!empty($data['id'])) {
    shoov_repository_check_repository_unique($data['id'], $node);
    $wrapper->field_github_id->set($data['id']);
  }
}

/**
 * Implements hook_node_insert().
 *
 * Check that vocabulary with name "Screenshots tags" exist for this repository
 * otherwise create one and assign with repository.
 *
 * @param $node
 *    Repository object.
 */
function shoov_repository_node_insert($node) {
  if ($node->type != 'repository') {
    // Not a repository node.
    return;
  }

  shoov_repository_trigger_new_repo_event($node);
  shoov_repository_create_screenshot_tags_vocabulary($node);
}

/**
 * Trigger event when new repository is created.
 *
 * Send new repository's data to the client.
 *
 * @param stdClass $node
 *   The repositorynode object.
 */
function shoov_repository_trigger_new_repo_event($node) {
  $account = user_load($node->uid);
  $handler = restful_get_restful_handler('repositories');
  $handler->setAccount($account);
  $result = $handler->get($node->nid);

  $data = array($result[0]);

  shoov_pusher_trigger_user_event($node->uid, 'new_repo', $data);
}

/**
 * Determine if a vocabulary exists in a repository.
 *
 * @param $vocabulary
 *    The name of a vocabulary.
 * @param $node
 *    The repository ID.
 *
 * @return int|FALSE
 *    The vid of vocabulary or false if vocabulary doesn't exist.
 */
function shoov_repository_get_vocabulary_by_repo($vocabulary, $repository_id) {
  // Check that the vocabulary exist for this repository.
  $vocabularies = og_vocab_relation_get_by_group('node', $repository_id);
  foreach ($vocabularies as $vocab) {
    if (taxonomy_vocabulary_load($vocab->vid)->name == $vocabulary) {
      return $vocab->vid;
    }
  }

  return FALSE;
}

/**
 * Create vocabulary for screenshot tags in repository.
 *
 * @param $node
 *    The repository id.
 *
 * @return int
 *    The id of newly created vocabulary.
 */
function shoov_repository_create_screenshot_tags_vocabulary($node) {
  if ($vocabulary_id = shoov_repository_get_vocabulary_by_repo('Screenshots tags', $node->nid)) {
    // Vocabulary for screenshots tags already exist.
    return $vocabulary_id;
  }

  // Creating the new vocabulary.
  $vocabulary = new stdClass();
  $vocabulary->name = "Screenshots tags";
  $vocabulary->machine_name = "screenshots_tags_" . $node->nid;
  $vocabulary->description = "The vocabulary contains tags for screenshots.";
  taxonomy_vocabulary_save($vocabulary);
  // Attach the new vocabulary to the group.
  og_vocab_relation_save($vocabulary->vid, 'node', $node->nid);
  og_vocab_create_og_vocab($vocabulary->vid, 'node', 'screenshot')->save();

  return $vocabulary->vid;
}

 /**
 * Check repository GitHub id is unique.
 *
 * @param int $github_id
 *  Repository GitHub id.
 * @param $node
 *  Repository node object.
 *
 * @throws Exception
 *  Throw exception is this GitHub id is already used.
 */
function shoov_repository_check_repository_unique($github_id, $node) {
  $query = new EntityFieldQuery();
  $query
    ->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'repository');
  if (!empty($node->nid)) {
    $query->propertyCondition('nid', $node->nid, '<>');
  }
  $result = $query
    ->fieldCondition('field_github_id', 'value', $github_id)
    // Skip node access check in order to check if there is no duplicate of
    // repository regardless of the author.
    ->addTag('DANGEROUS_ACCESS_CHECK_OPT_OUT')
    ->execute();

  if (empty($result['node'])) {
    return;
  }

  throw new Exception(format_string('GitHub ID @githubid was duplicated.', array('@githubid' => $github_id)));
}

/**
 * Check .shoov.yml file exists in repository.
 *
 * @param $node
 *  Repository node
 *
 * @return bool
 *  TRUE if file exists.
 */
function shoov_repository_yml_file_exists($node) {
  if ($node->type != 'repository') {
    return FALSE;
  }

  if (variable_get('test_mode', FALSE)){
    // This is the test mode. Don't check the repo.
    return TRUE;
  }

  // Get the master branch tree.
  $tree = shoov_repository_get_repo_tree($node->title);
  if (!$tree) {
    return FALSE;
  }

  // Check if .shoov.yml file is listed in the tree.
  $file_exists = FALSE;
  foreach ($tree as $item) {
    if ($item['path'] != '.shoov.yml') {
      continue;
    }
    $file_exists = TRUE;
  }

  return $file_exists;
}

/**
 * Get the GitHub repository tree.
 *
 * @param $repo_name
 *  The GitHub repository name.
 *
 * @return array
 *  Returns the tree.
 */
function shoov_repository_get_repo_tree($repo_name) {
  global $user;
  $account = user_load($user->uid);

  // Get user's github access token.
  $user_wrapper = entity_metadata_wrapper('user', $account);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  // Get the sha hash.
  $sha = shoov_repository_get_sha($repo_name);
  if (!$sha) {
    return;
  }

  // Get the tree.
  $url = 'repos/' . $repo_name . '/git/trees/' . $sha;
  $data = shoov_github_http_request($url, $options);
  if (!isset($data['data']['tree'])) {
    // Probably the sha hash is incorrect.
    return;
  }
  $tree = $data['data']['tree'];

  return $tree;
}

/**
 * Get the sha hash for the default branch for the repository.
 *
 * @param $repo_name
 *  GitHub repository name
 *
 * @return string
 *  Returns the sha hash.
 */
function shoov_repository_get_sha($repo_name) {
  global $user;
  $account = user_load($user->uid);

  // Get default branch for the repo.
  $branch = shoov_repository_get_default_branch($repo_name);

  // Get user's github access token.
  $user_wrapper = entity_metadata_wrapper('user', $account);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  // Get the sha hash for the branch.
  $url = 'repos/' . $repo_name . '/git/refs/heads/' . $branch;
  $data = shoov_github_http_request($url, $options);
  if (!isset($data['data']['object'])) {
    // Probably branch doesn't exist.
    return;
  }
  $sha = $data['data']['object']['sha'];
  return $sha;
}

/**
 * Get the default branch for the GitHub repository.
 *
 * @param $repo_name
 *  The GitHub repository name.
 *
 * @return string
 *  Returns the default repository branch name
 */
function shoov_repository_get_default_branch($repo_name) {
  global $user;
  $account = user_load($user->uid);

  // Get user's github access token.
  $user_wrapper = entity_metadata_wrapper('user', $account);
  $access_token = $user_wrapper->field_github_access_token->value();

  $options = array(
    'headers' => array(
      'Authorization' => 'token ' . $access_token,
    ),
  );

  // Get the tree.
  $url = 'repos/' . $repo_name;
  $data = shoov_github_http_request($url, $options);
  if (!isset($data['data']['default_branch'])) {
    // Probably the repository name is incorrect.
    return;
  }
  $branch = $data['data']['default_branch'];
  return $branch;
}
